socketモジュール
*通信を行えるようにするモジュール
1. socketを作る
   IP: socket.AF_INET
   TCP: socket.AF_INET, socket.SOCK_STREAM
   UDP: socket.AF_INET, socket.SOCK_DGRAM

2. connectionを作る(TCPのみ）
   TCP server:bind サーバを立てる
              listen 接続要求を待つ
              accept アクセスしてきた対象のコネクションとアドレスを入れる
   TCP client:connect サーバに接続する

3. 送受信する
   TCP: send コマンドを送信
        recv 出力などを受けとる
   UDP: sendto,
        recvfrom

subprocessモジュール
*pythonからコマンドを実行するためのモジュール
 コマンドを事項できるということは外部ファイルを実行したり、現在のディレクトリから移動したりなど,
 多彩なことがpythonから実行できるようになる

subprocess.run() コマンドを実行させる
subprocess.Popen(コマンド, shell=True,stdout=subprocess.PIPE, stderr=subprocess.PIPE)　出力をオブジェクトで返すshell=Trueは標準のシェルを使うという意味
PIPEはPopenのstdin,stdout.stderr引数に渡して標準ストリームに対するパイプを開くことを指定するための特殊値
stddin:標準入力
stdout:標準出力
stderr:標準エラー出力
shell:シェル経由(shell=Trueなど)

例)
op = subprocess.Popen(command, shell=True, stderr=subprocess.PIPE, stdout=subprocess.PIPE)
output = op.stdout.read()
output_error = op.stderr.read()

subprocess.Popen(cmd, stdout=subprocess.PIPE,shell=True).stdout.readlines()

argparseモジュール------------------
*コマンドラインで動くアプリケーションを作成可能

例)---------------------------------
import argparse
 
# パーサーを作る
parser = argparse.ArgumentParser(
            prog='argparseTest', # プログラム名
            usage='Demonstration of argparser', # プログラムの利用方法
            description='description', # 引数のヘルプの前に表示
            epilog='end', # 引数のヘルプの後で表示
            add_help=True, # -h/–help オプションの追加
            )
 
# 引数の追加
parser.add_argument('-v', '--verbose', help='select mode',
                    action='store_true')
 
# 引数を解析する
args = parser.parse_args()
 
if args.verbose:
    print('Hello')
else:
    print('こんにちは')
------------------------------------
